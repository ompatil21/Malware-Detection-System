from flask import Flask, jsonify, request
from flask_bcrypt import Bcrypt
from flask_jwt_extended import (
    JWTManager,
    create_access_token,
    jwt_required,
    get_jwt_identity,
)
from pymongo import MongoClient
from datetime import timedelta

app = Flask(__name__)

# JWT Configuration
app.config["JWT_SECRET_KEY"] = "your-secret-key"  # Replace with your own secret key
app.config["JWT_ACCESS_TOKEN_EXPIRES"] = timedelta(hours=1)  # Token expiry

# Initialize extensions
bcrypt = Bcrypt(app)
jwt = JWTManager(app)

# Connect to MongoDB
client = MongoClient("mongodb://localhost:27017/")
db = client["trojan_detection"]  # Replace with your database name


@app.route("/")
def home():
    return "Welcome to the Flask API!"


# Route for User Signup
@app.route("/api/signup", methods=["POST"])
def signup():
    username = request.json.get("username")
    password = request.json.get("password")

    # Check if the user already exists
    if db.users.find_one({"username": username}):
        return jsonify({"message": "User already exists"}), 400

    # Hash the password and store it in the database
    hashed_password = bcrypt.generate_password_hash(password).decode("utf-8")
    db.users.insert_one({"username": username, "password": hashed_password})

    return jsonify({"message": "User created successfully"}), 201


# Route for User Login
@app.route("/api/login", methods=["POST"])
def login():
    username = request.json.get("username")
    password = request.json.get("password")

    # Fetch user from the database
    user = db.users.find_one({"username": username})
    if not user or not bcrypt.check_password_hash(user["password"], password):
        return jsonify({"message": "Invalid username or password"}), 401

    # Create a JWT token
    access_token = create_access_token(identity={"username": username})
    return jsonify({"token": access_token}), 200


# Protected route (Admin or User Dashboard)
@app.route("/api/dashboard", methods=["GET"])
@jwt_required()  # Require valid JWT token to access this route
def dashboard():
    current_user = get_jwt_identity()  # Get the identity from the JWT
    return jsonify(
        message=f"Welcome, {current_user['username']}! This is your dashboard."
    )


if __name__ == "__main__":
    app.run(debug=True)
