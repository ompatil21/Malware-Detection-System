"use client";
import { useState } from "react";
import axios from "axios";

// Define the PredictionResult type
interface PredictionResult {
    prediction: string;
    trojanType: string;   // Type of Trojan
    filename: string;     // Filename
}

export default function PredictTrojan() {
    const [selectedFile, setSelectedFile] = useState<File | null>(null); // File input state
    const [result, setResult] = useState<PredictionResult | null>(null); // Prediction result state
    const [message, setMessage] = useState<string | null>(null); // Message for status/errors
    const [isLoading, setIsLoading] = useState(false); // Loading indicator state
    const [progress, setProgress] = useState(0); // Progress bar state

    const MAX_FILE_SIZE = 10 * 1024 * 1024; // 10MB limit
    const ALLOWED_EXTENSIONS = ['csv']; // Allowed file types

    // Function to check if the selected file type is allowed
    const isAllowedFileType = (fileName: string) => {
        const fileExtension = fileName.split('.').pop()?.toLowerCase();
        return ALLOWED_EXTENSIONS.includes(fileExtension || '');
    };

    // Handle file selection
    const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
        const file = event.target.files?.[0];
        if (!file) {
            setMessage("No file selected.");
            setSelectedFile(null);
            return;
        }

        if (file.size > MAX_FILE_SIZE) {
            setMessage("File size exceeds 10MB limit.");
            setSelectedFile(null);
            return;
        }

        if (!isAllowedFileType(file.name)) {
            setMessage(`Only ${ALLOWED_EXTENSIONS.join(', ')} files are allowed.`);
            setSelectedFile(null);
            return;
        }

        setSelectedFile(file);
        setMessage(null); // Clear any previous message
    };

    // Handle file submission
    const handlePredict = async () => {
        if (!selectedFile) {
            setMessage("Please select a file before submitting.");
            return;
        }

        const formData = new FormData();
        formData.append("file", selectedFile);

        setIsLoading(true); // Start loading indicator
        setProgress(0); // Reset progress

        try {
            const token = localStorage.getItem("token"); // Get JWT from localStorage

            // Post file to the backend with progress tracking
            const response = await axios.post<PredictionResult>(
                "http://localhost:5000/api/predict-trojan",
                formData,
                {
                    headers: {
                        "Content-Type": "multipart/form-data", // Ensure multipart form-data header
                        Authorization: `Bearer ${token}`, // Include token
                    },
                    onUploadProgress: (progressEvent) => {
                        if (progressEvent.total) {
                            const percentCompleted = Math.round(
                                (progressEvent.loaded * 100) / progressEvent.total
                            );
                            setProgress(percentCompleted); // Update progress bar
                        }
                    },
                }
            );

            setResult(response.data);
            setMessage(null); // Clear any previous messages
        } catch (error) {
            if (axios.isAxiosError(error) && error.response) {
                setMessage(`Error: ${error.response.data.message}`); // Display backend error
            } else {
                setMessage("Error analyzing the file. Please try again.");
            }
        } finally {
            setIsLoading(false); // Stop loading indicator
        }
    };

    return (
        <div className="min-h-screen flex items-center justify-center bg-gray-100">
            <div className="w-full max-w-md bg-white shadow-md rounded-lg p-8">
                <h1 className="text-3xl font-bold mb-6 text-center text-gray-800">
                    Predict Trojan
                </h1>

                <div className="mb-4">
                    <label className="block text-gray-700 font-bold mb-2">Select File</label>
                    <input
                        type="file"
                        onChange={handleFileChange}
                        className="block w-full p-2 border border-gray-300 rounded-lg"
                        accept=".csv" // Only allow CSV files
                    />
                </div>

                {progress > 0 && (
                    <div className="w-full bg-gray-200 rounded-lg h-4 mb-4">
                        <div
                            className="bg-blue-500 h-4 rounded-lg"
                            style={{ width: `${progress}%` }}
                        ></div>
                    </div>
                )}

                <button
                    onClick={handlePredict}
                    className="w-full px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 focus:outline-none"
                    disabled={isLoading || !selectedFile}
                >
                    {isLoading ? "Processing..." : "Run Prediction"}
                </button>

                {/* Display message or errors */}
                {message && <p className="text-red-500 text-center mt-4">{message}</p>}

                {/* Display result if available */}
                {result && (
                    <div className="mt-6 p-4 bg-gray-100 rounded">
                        <h2 className="text-2xl font-semibold">Prediction Result</h2>
                        <p><strong>Prediction:</strong> {result.prediction}</p>
                        <p><strong>Trojan Type:</strong> {result.trojanType}</p>
                        <p><strong>File:</strong> {result.filename}</p>
                    </div>
                )}
            </div>
        </div>
    );
}
