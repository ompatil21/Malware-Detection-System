"use client";
import { useState, useEffect } from "react";
import axios from "axios";
import { Pie, Bar } from "react-chartjs-2";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faShieldAlt, faExclamationTriangle } from "@fortawesome/free-solid-svg-icons";
import 'chart.js/auto';

interface PredictionResult {
    row: number;          // Row number in the file
    prediction: number;   // 1 for Trojan, 0 for Benign
    trojanType: string;   // Type of Trojan
}

export default function PredictTrojan() {
    const [selectedFile, setSelectedFile] = useState<File | null>(null);
    const [results, setResults] = useState<PredictionResult[] | null>(null);
    const [message, setMessage] = useState<string | null>(null);
    const [isLoading, setIsLoading] = useState(false);
    const [progress, setProgress] = useState(0);

    const MAX_FILE_SIZE = 10 * 1024 * 1024; // 10MB limit
    const ALLOWED_EXTENSIONS = ['csv'];

    useEffect(() => {
        if (selectedFile) {
            setResults(null);
            setMessage(null);
        }
    }, [selectedFile]);

    const isAllowedFileType = (fileName: string) => {
        const fileExtension = fileName.split('.').pop()?.toLowerCase();
        return ALLOWED_EXTENSIONS.includes(fileExtension || '');
    };

    const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
        const file = event.target.files?.[0];
        if (!file) {
            setMessage("No file selected.");
            setSelectedFile(null);
            return;
        }

        if (file.size > MAX_FILE_SIZE) {
            setMessage("File size exceeds 10MB limit.");
            setSelectedFile(null);
            return;
        }

        if (!isAllowedFileType(file.name)) {
            setMessage(`Only ${ALLOWED_EXTENSIONS.join(', ')} files are allowed.`);
            setSelectedFile(null);
            return;
        }

        setSelectedFile(file);
        setMessage(null); // Clear any previous message
    };

    const handlePredict = async () => {
        if (!selectedFile) {
            setMessage("Please select a file before submitting.");
            return;
        }

        const formData = new FormData();
        formData.append("file", selectedFile);

        setIsLoading(true); // Start loading indicator
        setProgress(0); // Reset progress

        try {
            const token = localStorage.getItem("token"); // Get JWT from localStorage
            if (!token) {
                setMessage("Authentication required. Please log in.");
                return;
            }

            const response = await axios.post<PredictionResult[]>(
                "http://localhost:5000/api/predict-trojan",
                formData,
                {
                    headers: {
                        "Content-Type": "multipart/form-data", // Ensure multipart form-data header
                        Authorization: `Bearer ${token}`, // Include token
                    },
                    onUploadProgress: (progressEvent) => {
                        if (progressEvent.total) {
                            const percentCompleted = Math.round(
                                (progressEvent.loaded * 100) / progressEvent.total
                            );
                            setProgress(percentCompleted); // Update progress bar
                        }
                    },
                }
            );

            setResults(response.data); // Expecting an array now
            setMessage(null); // Clear any previous messages
        } catch (error: unknown) {
            if (axios.isAxiosError(error) && error.response) {
                const status = error.response.status;
                if (status === 401) {
                    setMessage("Authentication failed. Please log in again.");
                } else if (status === 400) {
                    setMessage(`Error: ${error.response.data.message}`);
                } else {
                    setMessage("Server error. Please try again later.");
                }
            } else {
                setMessage("Network error. Please check your connection and try again.");
            }
        } finally {
            setIsLoading(false); // Stop loading indicator
        }
    };

    // Color and icon mapping for predictions
    const colorMap = {
        "Benign": "bg-green-200 text-green-800 border-l-4 border-green-500",
        "Malware": "bg-red-200 text-red-800 border-l-4 border-indigo-500"
    };

    const iconMap = {
        "Benign": faShieldAlt,
        "Malware": faExclamationTriangle,
    };

    // Preparing data for chart representation
    const chartData = () => {
        if (!results) return {
            labels: [],
            datasets: [],
        };

        const benignCount = results.filter((res) => res.prediction === 0).length;
        const malwareCount = results.length - benignCount;

        return {
            labels: ['Benign', 'Malware'],
            datasets: [
                {
                    label: 'Prediction Summary',
                    data: [benignCount, malwareCount],
                    backgroundColor: ['#34D399', '#EF4444'],
                },
            ],
        };
    };

    return (
        <div className="min-h-screen flex flex-col items-center bg-gray-100">
            <div className="w-full max-w-7xl bg-white shadow-md rounded-lg p-8">
                <h1 className="text-4xl font-bold mb-6 text-center text-blue-800">
                    Predict Trojan
                </h1>

                <div className="mb-4 w-1/2 mx-auto">
                    <label className="block text-blue-700 font-bold mb-2">Select File</label>
                    <input
                        type="file"
                        onChange={handleFileChange}
                        className="block w-full p-2 border border-gray-300 rounded-lg"
                        accept=".csv"
                    />
                </div>

                {progress > 0 && (
                    <div className="w-1/2 mx-auto bg-gray-200 rounded-lg h-4 mb-4">
                        <div
                            className="bg-blue-500 h-4 rounded-lg"
                            style={{ width: `${progress}%` }}
                        ></div>
                    </div>
                )}

                <div className="w-1/2 mx-auto">
                    <button
                        onClick={handlePredict}
                        className="w-full px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 focus:outline-none"
                        disabled={isLoading || !selectedFile}
                    >
                        {isLoading ? "Processing..." : "Run Prediction"}
                    </button>
                </div>

                {message && <p className="text-red-500 text-center mt-4">{message}</p>}

                {results && (
                    <>
                        <div className="mt-6 p-4  rounded-lg w-full">
                            <h2 className="text-3xl font-semibold text-center text-gray-600">Prediction Results</h2>

                            <div className="mt-12 w-full flex justify-around">
                                <div className="w-1/2">
                                    <h3 className="text-2xl font-semibold text-center text-gray-600 mb-4">Prediction Summary (Pie Chart)</h3>
                                    <Pie data={chartData()} />
                                </div>
                                <div className="w-1/2">
                                    <h3 className="text-2xl font-semibold text-center text-gray-600 mb-4">Trojan Type Distribution (Bar Chart)</h3>
                                    <Bar data={chartData()} />
                                </div>
                            </div>
                            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mt-6">
                                {results.map((res, index) => (
                                    <div
                                        key={index}
                                        className={`p-4 rounded-lg text-lg flex items-center ${colorMap[res.prediction === 0 ? "Benign" : "Malware"]}`}
                                    >
                                        <FontAwesomeIcon icon={iconMap[res.prediction === 0 ? "Benign" : "Malware"]} className="mr-3 text-2xl" />
                                        <div>
                                            <strong>Row {res.row}:</strong> {res.prediction === 0 ? "Benign" : "Malware"}
                                        </div>
                                    </div>
                                ))}
                            </div>
                        </div>


                    </>
                )}
            </div>
        </div>
    );
}
