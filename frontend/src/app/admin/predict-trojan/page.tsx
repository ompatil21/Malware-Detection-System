"use client";
import { useState } from "react";
import axios from "axios";

// Define the PredictionResult type
interface PredictionResult {
    prediction: string;
}

export default function PredictTrojan() {
    const [selectedFile, setSelectedFile] = useState<File | null>(null); // File input state
    const [result, setResult] = useState<PredictionResult | null>(null); // Prediction result state
    const [message, setMessage] = useState<string | null>(null); // Message for status/errors

    // Handle file selection
    const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
        const file = event.target.files?.[0];
        setSelectedFile(file || null);
    };

    // Handle file submission
    const handlePredict = async () => {
        if (!selectedFile) {
            setMessage("Please select a file before submitting.");
            return;
        }

        const formData = new FormData();
        formData.append("file", selectedFile); // Append selected file to formData

        try {
            // Post file to the backend
            const response = await axios.post<PredictionResult>(
                "http://localhost:5000/api/predict-trojan",
                formData,
                {
                    headers: {
                        "Content-Type": "multipart/form-data", // Ensure multipart form-data header
                    },
                }
            );

            // Set result based on the response from the backend
            setResult(response.data);
            setMessage(null); // Clear any previous messages
        } catch (error) {
            console.error("Error predicting Trojan:", error);
            setMessage("Error analyzing the file. Please try again.");
        }
    };

    return (
        <div className="min-h-screen flex items-center justify-center bg-gray-100">
            <div className="w-full max-w-md bg-white shadow-md rounded-lg p-8">
                <h1 className="text-3xl font-bold mb-6 text-center text-gray-800">
                    Predict Trojan
                </h1>

                <div className="mb-4">
                    <label className="block text-gray-700 font-bold mb-2">Select File</label>
                    <input
                        type="file"
                        onChange={handleFileChange}
                        className="block w-full p-2 border border-gray-300 rounded-lg"
                    />
                </div>

                <button
                    onClick={handlePredict}
                    className="w-full px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 focus:outline-none"
                >
                    Run Prediction
                </button>

                {/* Display message or errors */}
                {message && <p className="text-red-500 text-center mt-4">{message}</p>}

                {/* Display result if available */}
                {result && (
                    <div className="mt-6 p-4 bg-gray-100 rounded">
                        <h2 className="text-2xl font-semibold">Prediction Result</h2>
                        <p>{result.prediction}</p> {/* Display prediction */}
                    </div>
                )}
            </div>
        </div>
    );
}
