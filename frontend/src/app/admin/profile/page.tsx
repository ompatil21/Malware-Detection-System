"use client";

import { useEffect, useState } from "react";
import { useRouter } from "next/navigation"; // Use next/navigation for routing
import axios from "axios";

export default function Profile() {
    const [name, setName] = useState<string | null>(null); // Name state
    const [email, setEmail] = useState<string | null>(null); // Email state
    const [error, setError] = useState<string | null>(null); // Error state
    const router = useRouter();

    useEffect(() => {
        const fetchUserProfile = async () => {
            const token = localStorage.getItem("token");

            if (!token) {
                console.log("No token found, redirecting to login.");
                router.push("/login");
                return;
            }

            try {
                console.log("Fetching profile data...");
                const response = await axios.get("http://localhost:5000/api/profile", {
                    headers: {
                        Authorization: `Bearer ${token}`, // Send token to backend
                    },
                });

                // Log the response data for debugging
                console.log("Profile response data:", response.data);

                // Set user data from the response
                setName(response.data.name); // Set name from response
                setEmail(response.data.email); // Set email from response
            } catch (err) {
                console.error("Error fetching profile:", err);
                setError("Failed to load profile. Please login again.");
                localStorage.removeItem("token"); // Remove invalid token
                router.push("/login"); // Redirect to login on error
            }
        };

        fetchUserProfile(); // Fetch user profile on component mount
    }, [router]);

    const handleLogout = () => {
        console.log("Logging out...");
        localStorage.removeItem("token"); // Remove JWT token
        router.push("/login"); // Redirect to login
    };

    return (
        <div className="min-h-screen flex items-center justify-center bg-gray-100">
            <div className="w-full max-w-md bg-white shadow-md rounded-lg p-8">
                <h1 className="text-3xl font-bold mb-6 text-center text-gray-800">Profile</h1>
                {error ? (
                    <p className="text-red-500 text-center">{error}</p>
                ) : name ? (
                    <>
                        {/* Displaying name */}
                        <p className="text-lg mb-4">
                            Logged in as: <strong>{name}</strong>
                        </p>
                        {/* Displaying email */}
                        <p className="text-lg mb-4">
                            Email: <strong>{email}</strong>
                        </p>
                        {/* Logout Button */}
                        <button
                            onClick={handleLogout}
                            className="w-full px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 focus:outline-none"
                        >
                            Logout
                        </button>
                    </>
                ) : (
                    <p>Loading...</p>
                )}
            </div>
        </div>
    );
}
