"use client";

import { useEffect, useState } from "react";
import axios from "axios";

interface User {
    name: string;
    email: string;
    role: string;
    created_at: string;
    last_login: string | null;
    disabled: boolean;
}

export default function UserManagement() {
    const [users, setUsers] = useState<User[]>([]);
    const [searchQuery, setSearchQuery] = useState("");
    const [message, setMessage] = useState<string | null>(null);
    const [selectedUser, setSelectedUser] = useState<User | null>(null); // For updating user
    const [isModalOpen, setIsModalOpen] = useState(false); // Modal state
    const [updatedName, setUpdatedName] = useState("");
    const [updatedRole, setUpdatedRole] = useState("");

    // Fetch users
    useEffect(() => {
        const fetchUsers = async () => {
            const token = localStorage.getItem("token");

            if (!token) {
                return;
            }

            try {
                const response = await axios.get("http://localhost:5000/api/users", {
                    headers: { Authorization: `Bearer ${token}` },
                });
                setUsers(response.data);
            } catch (err) {
                console.error("Error fetching users:", err);
                setMessage("Failed to load users.");
            }
        };

        fetchUsers();
    }, []);

    // Handle user deletion
    const handleDelete = async (email: string) => {
        const token = localStorage.getItem("token");

        try {
            await axios.delete(`http://localhost:5000/api/users/${email}`, {
                headers: { Authorization: `Bearer ${token}` },
            });
            setUsers(users.filter((user) => user.email !== email));
            setMessage("User deleted successfully.");
        } catch (err) {
            console.error("Error deleting user:", err);
            setMessage("Failed to delete user.");
        }
    };

    // Handle user disabling
    const handleDisable = async (email: string, disabled: boolean) => {
        const token = localStorage.getItem("token");

        try {
            await axios.put(
                `http://localhost:5000/api/users/${email}`,
                { disabled: !disabled },
                {
                    headers: { Authorization: `Bearer ${token}` },
                }
            );
            setUsers(
                users.map((user) =>
                    user.email === email ? { ...user, disabled: !disabled } : user
                )
            );
            setMessage(disabled ? "User enabled." : "User disabled.");
        } catch (err) {
            console.error("Error disabling user:", err);
            setMessage("Failed to update user status.");
        }
    };

    // Handle user update (open modal)
    const handleUpdate = (user: User) => {
        setSelectedUser(user); // Store the selected user
        setUpdatedName(user.name); // Pre-fill the user's current name
        setUpdatedRole(user.role); // Pre-fill the user's current role
        setIsModalOpen(true); // Open modal
    };

    // Submit the updated user details
    const submitUserUpdate = async () => {
        const token = localStorage.getItem("token");

        try {
            await axios.put(
                `http://localhost:5000/api/users/${selectedUser?.email}`,
                { name: updatedName, role: updatedRole },
                { headers: { Authorization: `Bearer ${token}` } }
            );
            setUsers(
                users.map((user) =>
                    user.email === selectedUser?.email
                        ? { ...user, name: updatedName, role: updatedRole }
                        : user
                )
            );
            setMessage("User updated successfully.");
            setIsModalOpen(false); // Close modal after update
        } catch (err) {
            console.error("Error updating user:", err);
            setMessage("Failed to update user.");
        }
    };

    // Filter users based on search query
    const filteredUsers = users.filter(
        (user) =>
            user.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
            user.email.toLowerCase().includes(searchQuery.toLowerCase())
    );

    return (
        <div className="min-h-screen p-6 bg-gray-100">
            <h1 className="text-3xl font-bold mb-6 text-center text-gray-800">User Management</h1>

            {/* Search Box */}
            <input
                type="text"
                placeholder="Search by name or email"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="block w-full p-3 mb-4 border border-gray-300 rounded-lg"
            />

            {message && <p className="text-red-500 text-center mb-4">{message}</p>}

            {/* Users Table */}
            <table className="w-full border-collapse table-auto shadow-md rounded-lg">
                <thead>
                    <tr>
                        <th className="px-4 py-2 bg-gray-700 text-white">Name</th>
                        <th className="px-4 py-2 bg-gray-700 text-white">Email</th>
                        <th className="px-4 py-2 bg-gray-700 text-white">Role</th>
                        <th className="px-4 py-2 bg-gray-700 text-white">Created At</th>
                        <th className="px-4 py-2 bg-gray-700 text-white">Last Login</th>
                        <th className="px-4 py-2 bg-gray-700 text-white">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    {filteredUsers.map((user) => (
                        <tr key={user.email} className={user.disabled ? "bg-gray-200" : "bg-white"}>
                            <td className="border px-4 py-2">{user.name}</td>
                            <td className="border px-4 py-2">{user.email}</td>
                            <td className="border px-4 py-2">{user.role}</td>
                            <td className="border px-4 py-2">
                                {new Date(user.created_at).toLocaleString()}
                            </td>
                            <td className="border px-4 py-2">{user.last_login || "N/A"}</td>
                            <td className="border px-4 py-2 space-x-2">
                                {/* Disable/Enable Button */}
                                <button
                                    className={`px-4 py-2 rounded-lg text-white ${user.disabled ? "bg-green-500" : "bg-red-500"
                                        }`}
                                    onClick={() => handleDisable(user.email, user.disabled)}
                                >
                                    {user.disabled ? "Enable" : "Disable"}
                                </button>

                                {/* Delete Button */}
                                <button
                                    className="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600"
                                    onClick={() => handleDelete(user.email)}
                                >
                                    Delete
                                </button>

                                {/* Update Button */}
                                <button
                                    className="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600"
                                    onClick={() => handleUpdate(user)}
                                >
                                    Update
                                </button>
                            </td>
                        </tr>
                    ))}
                </tbody>
            </table>

            {/* Modal for Updating User */}
            {isModalOpen && (
                <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
                    <div className="bg-white p-6 rounded-lg">
                        <h2 className="text-2xl font-semibold mb-4">Update User</h2>

                        <label className="block mb-2">Name</label>
                        <input
                            type="text"
                            value={updatedName}
                            onChange={(e) => setUpdatedName(e.target.value)}
                            className="w-full p-2 mb-4 border border-gray-300 rounded-lg"
                        />

                        <label className="block mb-2">Role</label>
                        <select
                            value={updatedRole}
                            onChange={(e) => setUpdatedRole(e.target.value)}
                            className="w-full p-2 mb-4 border border-gray-300 rounded-lg"
                        >
                            <option value="user">User</option>
                            <option value="admin">Admin</option>
                        </select>

                        <div className="flex space-x-2">
                            <button
                                onClick={submitUserUpdate}
                                className="px-4 py-2 bg-blue-500 text-white rounded-lg"
                            >
                                Save
                            </button>
                            <button
                                onClick={() => setIsModalOpen(false)}
                                className="px-4 py-2 bg-gray-300 rounded-lg"
                            >
                                Cancel
                            </button>
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
}
